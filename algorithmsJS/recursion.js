/*
Рекурсия - это функция которая вызывает сама себя

Всегда должна иметь какое-то условие. Какой-то случай. При котором вызов функции прекращаеться
    иначе будет переполнение стека вызовов поскольку функция будет вызывать сама себя бесконечно

Пример:
    - Напишем фукнцию которая будет расчитывать факториал какого-то числа
factorial(5) - это когда числа последовательно от 1 до 5 будут умножаться 1 * 2 * 3 * 4 * 5

План выполнения:
    - Первым делом создаем условие при котором рекурсия закончиться
В нашем случае факториал от 1 равняется 1 - это и есть тот базовый случай

И функция должа возвращать число которое мы передали в эту фукнцию
Умноженную на функцию в которую мы передаем число на 1 меньше чем n
Т.е функция будет выполняться до тех пор пока n не будет ровняться 1


Числа Фиббоначи 
    - это определенная цепочка чисел где каждое последующее число ровняется сумме двух предыдущих

План выполнения
    - Начинаем с того что создаем условие при котором функция закончит выполнение
Т.е определим базовый случай при котором рекурсия будет завершаться - if(n === 1 || n === 2) return 1

    - В цикле проверяем если n либо 1 либо 2 где n номер числа в цепочке то возвращаем 1

По итогу фукнкция должна возвращать сумму вызова самой себя
Но параметром в первом случае мы предаем число которое стоит на одну позицию раньше 
А в втором на 2 позиции
*/
const factorial = (n) => {
    if (n === 1) return 1

    return n * factorial(n - 1)
}
console.log(factorial(8))


const fibonachi = (n) => {
    if(n === 1 || n === 2) return 1

    return fibonachi(n - 1) + fibonachi(n - 2)
}
console.log(fibonachi(2))