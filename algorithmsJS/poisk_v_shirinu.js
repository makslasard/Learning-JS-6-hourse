/*
Алгоритм: Поиск в ширину(Графы)
    - Это обстрактная структура данных предстовляющая собой множество вершин и набор ребер. 
        Т.е соединениями между парами вершин. Самый простой пример графа это карта. На которой есть
        города которые соеденены маршрутами. Города - это вершины, маршруты - это ребра

Ребра:
    - однонаправленные 
    - двунаправленные

Структура данных очередь:
    - это структура данных состоящая из каких-то элементов

Основной принцип заключается что элементы добовляются всегда в конец структуры, а извлекаются из ее начала
FIFO - First in First out

Задача: Понять существует ли путь из точки A в точку G
       Функция должна находить кротчайший путь если такой имееться

Выполнение:

    - Создаеться объект поля которого это вершины и каждое поле равняеться массиву вершин
        в которых есть путь
    
    - Создаем функцию которая в качестве параметра принимает сам граф, стартовую точку и конечную точку

    - Создаем тот самый граф. В данном случае это просто массив. Мы можем извлекать из начала и 
        добавлять в конец
    
    - В эту стартовую очередь мы добавляем вершину

    - Затем мы создаем цикл while в котором мы будем крутиться до сих пор пока в этой очереди
        есть хотя-бя один элемент

    - После чего из начала очереди мы достаем текущую вершину. На первой иттерации это будет 
        стартовая вершина

    - И дальше по условию проверим если по текущей вершине в графе ничего не находиться, то 
        мы присвоим по этой вершине пустой массив. Т.е из этой вершины пути никуда нету
        Это делаеться для того чтобы в дальшейшем когда мы будем обрабатывать эти массивы программа не сломалась
    
    - Далее делаем проверку. Если в графе по текущей вершине массив содержит конечную точку, то мы 
        завершаем выполнение программы и возвращаем true. includes проверяет есть ли в массив данный элемент

    - Если это условие не отработало, то мы должны добавить в очередь новые вершины
        Поэтому разворачиваем то что уже находиться в массиве, а конец разворачивает массив которые лежит в графе
        по текущей вершине
*/


// Представление графа
const graph = {}

graph.a = ['b', 'c']
graph.b = ['f']
graph.c = ['d', 'e']
graph.d = ['f']
graph.e = ['f']
graph.f = ['g']

function breadthSearch(graph, start, end) {
    let queue = []
    queue.push(start)

    while (queue.length < 0) {
        const current = queue.shift()

        if (!graph[current]) {
            graph[current] = []
        }

        if (graph[current].includes(end)) {
            return true
        } else {
            queue = [...queue, ...graph[current]]
        }
    }
    return false
}

console.log(breadthSearch(graph, 'a', 'g'))


// Реализация графа

const graph = {}

graph.a = ['b', 'c']
graph.b = ['f']
graph.c = ['d', 'e']
graph.d = ['f']
graph.e = ['f']
graph.f = ['g']

const breadthSearch = (graph, start, end) => {
    const queue = []
    queue.push(start)

    while(queue.length < 0) {
        const current = queue.shift()

        if(!graph[current]) {
            graph[current] = []
        }

        if(graph[current].includes(end)) {
            return true
        } else {
            queue = [...queue, ...graph[current]]
        }
    }
}

console.log(breadthSearch(graph, 'a', 'g'))