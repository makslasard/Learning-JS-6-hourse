/*
1. Основы анализа скорости алгоритмов с применением О-большое
2. Принцип работы памяти компьютера
    - представляет из себя что-то на подобии шкафа с огромным кол-вом выдвижных ящиков. 
        У каждого ящика есть свой адрес. В свободный ящик можно что-то положить, а из занятого 
        ящика достать то что там лежит. Каждый ящик - это ячейка памяти

        Каждый раз когда мы хотим что-то сохранить в памяти мы запрашиваем у ПК место в памяти,
            а он выдает адрес для сохранения значения

Понятие О - большое
    Специальная нотация описывает скорость работы алгоритма
    Время выполнения алгоритмов растет с разной скоростью
        Для этого нужно знать как возрастает время выполнения алгоритма с ростом размера списка
    За основу всегда берется самое худшее время выполнения алгоритма

    O - большое не сообщает время в секундах, а позволяет сравнить кол-во операций
    Оно указывает насколько быстро возрастает время выполнения алгоритма

    О - операции, большое потому-что в верхнем регистре

Алгоритмы
    Алгоритмом называеться набор инструкций для выполнения некоторой задачи

    - Линейный поиск: Выполняеться за линейное время O (n)

    - Бинарный поиск: Выполняеться за логарифмическое время O (log n)

        Алгоритм который на входе получает отсортированный список элементов
        Если элемент который нужен присутствует в списке, то бинарный поиск возвращает позицию элемента
        В противном случае возвращает null

        С каждой иттерацией исключаеться 50% чисел от цетрального элемента
        Бинарный поиск выполняеться за log2n шагов - обозначает сколько раз нужно перемножит 2 чтобы получить n
        log2n = log2 1000 = 9? - простой поиск

        log n - бинарный поиск log 1000 = 9

    Время выполнения очень сложных алгоритмов: O(n!)

    - Алгоритм быстрой сортировки: O(n * log n) - быстрые алгоритмы сортировки
    - Алгоритм сортировки слиянием O(n2) - медленные алгоритмы сортировки
    - Жадные алгоритмы
    - Алгоритмы графов
            Предназначены для поиска кратчайшего расстояния между двумя точками сети
            С их помощью можно вычислить кратчайший маршрут к точке назначения или кол-во
                промежуточных знакомых у двух людей в социальной сети
        Поиск в ширину
        Алгоритм Дейкстры
    - Алгоритм k ближайших соседей
        Используеться для всего где нужно прогнозирование значений

Структуры данных

    - Массивы
        При использовании массива все задачи хранятся в памяти непрерывно (т.е рядом друг с другом)
        Данные храняться блоком и зависимы друг от друга. Если происходит добавление элемента происходит
            перезапись и нужно будет подпирать другое место в памяти. Это замедляет работу

        Чтение: O(1)
        Вставка: O(n)

        Плюсы:
            - Хорошо подходят для чтения элементов в произвольных позициях, потому что обращение к 
                любому элементу происходит мгновенно
            - Заранее известны адреса элементов

    - Связные списки (Связные адреса памяти)

        При использовании связного списка элементы могут размещаться где угодно в памяти
        В каждом элементе храниться адрес следующего элемента списка
        Таким образом набор произвольных адресов памяти объединяеться в цепочку

        Чтение: O(n)
        Вставка: O(1)

        Плюсы:
            - Хорошо справляются с вставкой элементов
            - Хорошо работают когда чтение элементов происходит последовательно

        Минусы:
            - Прыгать по списку не получиться
    - Хеш-таблицы
        Структура данных предназначена для хранения пар ключ значение


Методы решения задач
    - Рекурсия
    - Принцип "Разделяй и властвуй"
    - Декларативный 
    - Императивный
    - Методы динамического программирования




















*/