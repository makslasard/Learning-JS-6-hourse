/*
Алгоритм бинарного поиска который работает на логорифмическое время
    - что в разы на огромной выборке данных работает быстрее

Данный алгоритм можно реализоавть как с помощью рекурсии, так и с помощью цикла
В данном случае мы будем реализовывать алгоритм с помощью цикла

В первую очередь нам нужно получить центральный элемент в массиве
Чтобы найти центральный элемент, нам нужно знать позицию первого элемента и позицию последнего
Первый элемент это - 0, а последняя вычисляеться по длине массива array.length

Также нам понадобятся 2 вспомогательные переменные 
    found - это некоторый флаг который будет отображать нашли мы элемент или нет
    position - позиция элемента которую мы будем возвращать из функции. Если элемент не был найден мы вернем -1 

Теперь мы создадим while цикл в который будет крутиться пока мы либо не нашли элемент
    либо стартовая и конечная позиции не поравнялись 
И в цикле можно высчитывать позицию центрального элемента
    - мы стартовую позицию складываем с конечной позиции и делим на 2

Может произойти ситуация когда у нас получиться не целое число
Для этого воспользуемся Math.floor - которое округляет число до нижней границы

Следующим этапом в условии проверяем 
    - Если элемент находящийся по индексу middle который мы высчитали равен элементу который мы ищем, то 
флаг found устанавливаем в true и присваиваем позицию

Если мы элемент нашли итерации прекращаются

Если искомый элемент меньше чем элемент который находиться в самой середине тогда нас интересует только левая часть массива
    поскольку элемент меньше центрального. Поэтому нам нужно изменить значение переменной end когда мы опять в слудующий 
    иттерации цикла высчитывать среднее значение правая часть вообще не учитывалась

    И тоже самое мы делаем на случай если искомый элемент центральный. Таком случае нам нужно сдвинуть стартовую позицию
    чтобы левой части для нас не существовало

В конце нужно только вернуть позицию элементов

Если элемент был найден он присвоиться в условии
Если не найден мы вернем - 1

*/
const arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
let count = 0

function binarySearch(array, item) {
    let start = 0
    let end = array.length
    let middle
    let found = false
    let position = -1
    while (found === false && start <= end) {
        count += 1
        middle = Math.floor((start - end) / 2)
        if (array[middle] === item) {
            found = true
            position = middle
            return position
        }
        if (item < array[middle]) {
            end = middle - 1
        } else {
            start = middle + 1
        }
    }
    return position;
}

console.log(binarySearch(arr, 8))
console.log(count)