// Мы должны каждый кусочек интерфейса описать в отдельных файлах и import|export. 
// И собирать все эти файлы в одно большое приложение 


// const calculate = a => {
//     return function(b) {
//         return a + b
//     }
// }
// console.log(calculate(1)(2))

// 1. Как настроить эту сборку? 2. Какие папки создавать? 3. Какие пакеты будут участвовать?
// Чтобы у начинающих было меньше трудностей, был создан пакет Create React App
// Create React App - это сразу готовая сборка которая создает в одну команду готовое и полностью настроенное приложение 
// Все настройки внутри уже будут готовы 

// Чтобы начать работать с React нужно выполнить:
// 1. Ввести команду npx create-react-app my-app , чтобы загрузить пакет CRA
// 2. Перейти через консоль или терминал в папку с React проектом 
// 3. В консоли ввести команду npm start , и откроется в браузере приложение 

// Структура приложения. Что оно содержит на базовом уровне?

/* Папка src - это рабочая папка в которой хранятся все файлы которые находятся в работе
- Внутри есть файлы index.js и App.js - это главные файлы 
- Файл index.js - это самый главный файл который есть у нас в сборке. В него мы будем собирать все файлы которые есть в нашем приложении
- К файлцу App.js также идут стили index.css которые также импортированны
- Также содержит всю базовую разметку 
- Также есть файл для тестирования дополнительных функций reportWebVitals.js
- Есть логотип который импортируется прямо в приложение 

Папка public
- Она обычно содержит статичные файлы
- Самый обычный index.html - именно этот файл будет осново пологающим 
- Также есть gitignore - чтобы у нас не push лишние файлы

Что важно знать из сборки которую мы установили: 
- Основными ее частями является Webpack и Babel. Первый соберает весь наш проект, и следит за изменениями которые будут в файлах. Также будет обновлять страницу, если это нужно
- Второй т.е Babel не только работает над поддержкой всех брузеров. Может выступать в роли компилятора, который переводит препроцессор JSX в обычный JS код

- Есть такой плагин transform-react-jsx на странице Babel. Этот плагин берет JSX код и переводит его в стандартный JavaScript
- Важно знать, что именно Babel занимается компиляцией JSX в JS
*/

/*
Работаем c JSX препрацессором, ограничения в нем

-Файл index.js содержит. Первые строчки которые мы будем видеть в React это import

Разница между библиотеками React и ReactDOM
- Первая отвечает за работу с React, JSX, с внутренними возможностями 
- Вторая позволяет нам работать именно с DOM структурой на странице. Она позволяет нам вставлять библиотеку React и тот продукт который у нас получается на страницу \

- В сборке используется Webpack он позволяет вот так на прямую импортировать стили и они будут должным образом собранны
- Одна из основных концепций React это разбиение приложения на компоненты 
- Компоненты - это блоки пользовательского интерфейса, которые могут иметь собственное поведение 
- Повторяющиеся элементы - это компоненты у которых есть собственное поведение. 
- Именно блок какой-то функциональности который может иметь свое поведение и может состоять из разного набора тегов 

- Мы должны четко различать элементы от компонентов.
- Элементы это структурные части компонентов 
- Компоненты это уже самостоятельные единицы. Структурные блоки нашего приложения которые могут переиспользоваться и путешествовать по другим файлам

- Классы которые есть в JavaScript это тоже функции просто обернутые в красивую оболочку 
- Это значит что компоненты React могут быть классами

*/