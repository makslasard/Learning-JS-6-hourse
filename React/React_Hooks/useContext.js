/*
Контекст в React - возможность передачи данных, props через дерево компонентов без необходимости передавать
    props на промежуточных уровнях

Это глобальный store на который мы можем подписаться и следить за какими-то props, вытаскивать от туда какие-то методы

Чтобы создать контекст в React есть специальный метод: React.createContext()
    - одним параметром мы можем передать начальное значение

При выполнении этого метода он вернет нам context.
Это будет объект в котором находится 2 компонента
    - Context.Provider
    - Context.Consumer

Context.Provider - это компонент обертка в каторую мы можем передать value, начальный props который мы хотим 
    передать дочерним компонентам. Позволяет передавать значения дочерним компонентам. 

    Для того чтобы получать эти значения, производить подписку, следить за ними есть несколько решений:
        - Class.contextType - свойство класса в котором мы можем присвоить сам контекст и через this 
            контекст получать доступ до нашего контекста
        - Context.Consumer

Context.Consumer - это компонент обертка который использует функциональный паттерн
    Можно просто вызвать внутри функцию. Парамметром которой получить доступ к контексту. Эта функция будет
    возвращать какой-то компонент которому мы можем передать нужные нам props из контекста

Context.displayName - свойство с помощью которого мы можем переименовать наш контекст для того чтобы при 
    дебагинге приложения мы в devTools могли видеть знакомые нам имена. Наиболее часто этого свойство 
    используется для удобства дебага

useContext - это хук который подзволяет произвести подписку доступ к нашему react.context по типу 
    как мы можем это сделать используя в классах contextType и Consumer

- Создадим файл context.js

import React from 'react';

const ThemeContext = React.createContext()

export default ThemeContext;


import ThemeContext from './context.js'

const [theme, setTheme] = React.useState()
return (
    <React.StrictMode>
        <ThemeContext.Provider value={{}}>
            <App />
        </ThemeContext.Provider>
    </React.StrictMode>
)

Мы обернули наш компонент App провайдером, передали ему начальное значение 
Это значит что все дочерние компоненты которые находятся в App и ниже будут иметь доступ к нашему context

Чтобы получить наши данные из context воспользуемся хуком useContext
И импортировать контекст ThemeContext из context.js которым мы должны передать хуку useContext для получения доступа

React.useContenxt(ThemContext) - хук который имеет только один параметр и этим параметром долженя являтся контекст
Очень важно чтобы мы полность передавали весь контекст, а не передаваил напиример React.useContenxt(ThemContext.Provider)
    или React.useContenxt(ThemContext.Consumer) это будет неправильно. Нужен именно весь контекст

Когда мы используем useContext мы создаем некоторую подписку на контекст и при изменении свойств в контекст будет 
    автоматически перерендериваться компонент который мы используем в useContext

const {theme, setTheme} = React.useContext(ThemeContext)

При изменении свойств принудительно производит перерендер компонента

*/