/*
React Hooks - useRef

const ulRef = React.useRef()
    - данная переменная работает с хуком useRef

useRef на выходе выдает объект
Т.е мы бы хотели чтобы у нас хранилось какое-то значение, но нам возвращается объект
Дело в том что используется обычный JS никакой сверх логики. Разработчики React специально передают объект

Дело в том что когда мы создаем объект мы можем внутри этого объекта по определенным свойствам ссылки на какие-нибудь данные
И в дальнейшем откуда-бы мы не обратились к этому объекту, мы всегда по свойству current можем получить актуальные данные
И не важно произойдет ли обновление state или нет. Мы всегда сможем получить актуальные данные

{current: undefined} - этот объект тоже самое что useRef()

Отличие этого способа от useRef() - заключается в том что,
useRef не будет пересоздавать объект каждый раз когда будит происходить обновление компонента

{current: undefined} - т.к это не правильно т.к нам нужно хранить значение вне зависимости от того произошло обновление или нет

Благодаря useRef - мы всегда сможем хранить актуальные данные и неважно обновиться компонент или нет

<ul ref={ulRef}

Свойство ref будет брать переменную ulRef и автоматически в current помещать свою ссылку на DOM элемент

useRef - это хранилише данных. В нашем случае в нем хранится ссылка на DOM элемент. Не только для хранения DOM элементов

React.useEffect(() => {
    ulElem = document.querySelector('ul') - старый способ 
    ulRef.current.addEventListener('scroll', handleScroll) - новй способ
}, [])

const ulRef = React.useRef() - хранит ссылку на DOM элемент
<ul ref={ulRef} - добавляется с помощью свойства

Чтобы не произошло у нас всегда остается ссылка. Она не теряется как в старом способе


useRef:
    - предназначен для работы с ref объектами. Это ссылки на реальные DOM элементы.

const ref = useRef()

Данный хук имеет один параметр. Этим параметром является начальное значение
По умолчанию если у нас нет начального значения мы можем указать null

При изменении данного ref объекта не происходит перерендер самого компонента
Работа с DOM элементами














*/