/*
Отвечает за мемоизацию возвращаемый значений в функцию

React Hooks — useMemo + React.memo

useMemo - это Хук
React.memo - это HOC (Компонент высшего порядка)

Что такое хук useMemo?
    - с помощью данного хука мы можем указать какую функцию мемоизировать и при каком условии

Мемоизация - она сохраняет результат выполнения нашей функции чтобы в последующем не выполнять ее на каждом раз
А выполнять только тогда когда реально необходимо

Данная оптимизация помогает избежать дорогостоящих вычислений при каждом рендере

const price = useMemo(hardFunc, [total])

useMemo - работает по типу как useEffect
Он получает 2 параметра: 1. Параметр это функция, 2. Параметр это зависимости
Различие в том что useMemo будет выполнять первую функцию и результат выполнения этой функции будет возврщать
При этом будет следить за зависимостями. Если зависимости изменяются то только тогда эта фукнция будет выполняться

Как только результат выполнения фукнции вернулся useMemo сохранит этот результат и будет возвращать его каждый раз
если зависимости не меняются. И если зависимости изменятся опять выполнит эту функцию, сохратит результат выполнения этой функции и 
будет каждый раз возвращать предыдущее значение только в тех случаях когда зависимости не изменились 

React.useMemo() - решает проблему зависания 

React.memo - это вспомогательная фукнция для компонентов
Используется чтобы избавиться от лишних ре-рендеров для увеличения производительности
Для этого компонент нужно обернуть в React.memo()


Резюме

Благодаря хуку useMemo мы смогли вызывать нашу сложную функцию только тогда когда она реально необходима
Если состояние зависимоти меняется хук будет вызывать фукнцию, будет сохранять результат
И вызывать эту функцию только в том случае если состояние зависимости меняется

Если зависимость не изменилась, то useMemo будет возвращать предыдущее значение которое было вызывано ранее
Благодаря этой оптимизации наше приложение перестало зависать


С пощью React.memo мы сказали что весь наш функциональный компонент является мемоизированным и будет проверять каждый раз
Если же props компонента изменились, то только тогда делай ре-рендер


useMemo:
    - предназначен для оптимизации (мемоизации) значений которые будет расчитывать нам функция для того чтобы
мемоизовать их и сохранить как переменные. Мемоизация конкретной фукнции

const countSun = React.useMemo(() => sum(num), [num])


React.memo:
    - не производит глубокой проверки. И если наше значения сверху не меняются (которые приходят к нам из props)
Данный компонент как-бы кэширует эти значения и он не перерендеривается

- export default React.memo(Post);


















*/