/*
useReducer:
    - является продвинутым хуком который можно использовать вместо useState()

Нужен для решения проблемы когда у нас большое колличество состояний например в объекте

2 основный кейса применения useReducer:
useReducer это продвинутый useState в котором мы можем хранить большое колличество состояний без использования
    несколький useState. При этом мы можем формировать каждое последующее состояние на основе предыдущего

function reducer(state, action) {
    switch(action.type) {
        case 'RESET':
            return state
        default:
            return state
    }
}

    - 1 параметром мы передаем начальный stata
    - 2 параметром получаем action. Благодаря action мы будем менять состояние

Action - это просто объект благодаря которому мы можем используя switch менять состояние в нашем reducer
    и возвращать обсолютно новый объект

По умолчанию мы будем возвращать весь state

reducer - это просто функция со switch/case в котором мы можем изменять состояние благодаря разным actions с типами

useReducer(reducer, {post: [], check: false, type: 'posts'})

1 параметром мы передаем созданный заранее reducer 
Для того чтобы получить state мы должны передать вторым параметром объект с нужными полями
    представляющий из себя объект с несколькими начальными состояниями

Сам useReducer возвращает массив 0 элементом которого является сам state, а вторым элементом dispatch функция 
    пердавая action в которую мы будем менять значения в reducer 

const [data, dispatch] = useReducer(reducer, {post: [], check: false, type: 'posts'})

data - это объект в котором мы храним все состояние, то использую точную аннотацию мы достанем нужные нам свойства

fucntion init(state) {

}

3 параметром useReducer является функция назовем ее init
    - данная функция необходима что-бы сделать какие-то отложенные вычисления для получения начального состояния reducer

Как аргумент получаем весь state и мы должны данный state вернуть обратно

Для чего нам нужна данная функция:
    - иногда нам нужно добавить какое-нибудь состояние. Благодаря данной функции мы можем добавлять дополнительные 
    состояния либо изменять текущее делая промежуточный перерасчет



















*/