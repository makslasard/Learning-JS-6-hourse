/*
React Hooks — useCallback
    - useCallback просто сохраняет ссылку

const handleScroll = React.useCallback(() => {
    console.log('Был скролл!')
}, [])

Далее объясняем что у useCallback есть зависимости т.е он будет следит нужно ли пересоздавать функцию или нет
Если мы передадим пустой массив это значит что наша функция при первом mount создается и всё
С этого момента пересоздаваться она больше не будет. 

Не важно очистился у нас state, добавился, удалился элемент или что-нибудь еще. У нас не будет пересоздаваться ссылка
До тех пор пока мы не скажем что в зависимостях что-то изменилось

Если мы исопльзуем useCallback, то все что находится внутри функции будет значть о том что существовало, 
на момент создания этой функции


useCallback:
    - хук для мемоизации функции как и useMemo. По синтаксису выглядит также 

Предназначен для того чтобы мемоизировать сохранять полностью всю функцию, а не только ее значение
В кейсах оптимизации useCallback используют в основном для того чтобы оптимизировать rendering дочерних компонентов

const setType = React.useCallback(() => {
    console.log('Memoized!')
    dispatch({ type })
}, [data.type])

Благодаря данной зависимости мы будем проверять что тип навигации у нас не изменился, то мы будем возвращать старую функцию
Если изменился, то нам нужно будет обновить эту функцию и перерендерить дочерний компонент



*/