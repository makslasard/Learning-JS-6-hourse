/*
Дополнительные основы JavaScript: 

1. Оператор нулевого слияния (Nullish, ??) - ES11
    - оператор выглядит как 2 вопросительных знака

Реагирует не на все false, а только на null и undefined

let userName;
console.log(userName ?? 'User')

Данный оператор похож на оператор или || , но он обращает свое внимание на то что находится
    внутри переменной userName. Работает не со всеми 5 значениями которые false в логическом контексте, а
    только с null и undefined

Если в первом аргументе будет null или undefined, то будет возвращен второй результат
Если мы подставим в переменную значение которое в логическом контексте будет false, то отобразиться значение 
    этой переменной. Т.к это не null или undefined

Это расширяет наши возможности и позволяет не писать кучу проверок

userName ?? userKey ?? 'User'


2. Оператор опциональной цепочки (?.)
    - проверяет выражение слева от себя и останавливает операции если оно имеет undefined или null

И просто возвращает undefined: block?.textContent
Позволяет избовляться от лишних условий, там где это не нужно

Работает только на чтение свойства. Если что-то записать будет ошибка
    Т.к в block мы получаем undefined и применяем метод к undefined. Поэтому ошибка
    С помощью одного символа мы можем избавиться от больших проверок
    Ставить только там где предпологаются проблемы. Потенциально не существующие фукнции


3. Живые коллекции и полезные методы

4. Тип данных Symbol
    - символы необходимы нам чтобы создовать уникальные id (идентификаторы). Они уникальны и 
        не изменяемые. Применяются к свойствам объектов

Кроме строк, свойствами объектов могут быть символы

let id = Symbol("id")
obj[id] = 1

Символы нужно создавать именно в таком синтаксисе
Символы всегда уникальны, даже если у них одинаковое описание

const obj = {
    'name': 'Test',
    [Symbol('id')]: 1 либо [id]: 1
}

Символы позволяют создавать скрытые при обычном доступе свойства, которые не показывается при 
    переборе объекта. Чтобы получить id можно написать метод () => return this[id]

Для нашей уверенности в том что это свойство никогда случайно не будет перезаписано







*/