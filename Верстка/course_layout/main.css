/*
Курс: Компетенция верстальщик - Михаил Непомнящий 10.05.2022


Работа с текстом и списками:
    1. ul как правило не существует без li, и li без ul. Они связаны
    2. По умолчанию список маркированный ul. Что он стал маркированный нужно поставить тег ol
    3. li - это еденица списка ul
    4. У списков есть атрибут type который оформить нумерацию: цифры, буквы, римские цифры и тд

Мнемоники HTML(спецсимвлды в HTML) - набор некоторых специальных символов которые помогают исопльзовать
    какие-то знаки которых нет на клавиатуре. Все спецсимволы начинаются с & и заканчиваются ; &sect;

Типы шрифтов:   
    - EOT
    - TTF
    - OTF
    - SVG
    - WOFF 
    - WOFF2

2 последниц - это современные стандарды. Более сжатые и легкие по весу
Остальные - для поддержки старых браузеров. Кросбраузерность. Тяжелые файлы

@font-face {
	font-family: 'Crimson Text';
	font-style: normal;
	font-weight: normal;
	src: local('Crimson Text'),
		url('/fonts/CrimsonText-Regular.woff2') format('woff2'), 
		url('/fonts/CrimsonText-Regular.woff') format('woff'),
		url('/fonts/CrimsonText-Regular.ttf') format('ttf'),
		url('/fonts/CrimsonText-Regular.eot') format('eot');
}
 
Браузер в любом случае возьмет один из этих файлов по необходимости. Остальные файлы он проигнорирует
Т.к шрифты которые подгружаются могут приходит в однов формате, или в нескольких старых на базе одного шрифта можно
    сконвертировать современный формат. Также можно просто подключить ссылку с сайта Google Fonts без скачивания

Данную возможность можно реализовать с помощью сайта transfonter
Чтобы пути в подключении шрифтов отображались правильно нужно поставить две точки, а не одну '../fonts'
При генерации файла сразу генерируется и файл подключения стилей

Shift + Tab - выравнивание влево(назад)

Некоторые шрифты могут не поддерживать киррилицу

Также мы можем подключать шрифты с помощью @import 
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;700&display=swap');
Его нужно подключать прямо в файл как и @font-face

Когда какой подход использовать?
    - ссылкой google fonts в head когда шрифт в открытом доступе
    - @font-face когда шрифты специфичные и их нет на google fonts. Поэтому мы скачиваем их напрямую

Еденицы измерения:  
    px - стандартная еденица измерения
    em - настраивают размеры относительно размера родителя
    rem - настраивают размеры относительно HTML. Современный стандарт

Чтобы импользовать rem нужно заранее указать размер шрифта для всего HTML 
Для удобства работы стандартную величену настраивают кратную десяти

html {
    font-size: 10px
}

На некоторые элементы браузер по умолчанию добавляет свои стили
Если у нас есть 2 одинаковых свойства, то второе свойство переопределит первое свойство

У margin есть отрицательное значение
У padding нет отрицательного значения

Чтобы вставить картинку на задний фон: 
background-image: url(ссылка без ковычек)

background-color: #fff2 - 4 символ (2) - это прозрачность в десятых долях
Но лучше все-таки использовать rgba()


Стилизация блочных элементов: 
    - 

Если картинка меньше чем нужно можно написать свойство repeat чтобы картинка повторялась пока не заполнит весь экран
background-attachment: fixed; - эффект parallax на чистом JS
Картинка остается на месте


Работа с сылками и кнопками

<a href=""></a> - у ссылки есть обязательный атриб href в который вставляется ссылка

Чтобы реализовать многостраничный сайт
Нужно написать страницу и подключить ее через href. Страницы должны находится в одно каталоге 
<a href="./about.html"></a>

Чтобы ссылки открывались в новом окне 
target="_blank", target="_self"
Обычно используется target="_blank", target="_self" - не используется

<a href="mailto:post@mail.ru">post@mail.ru</a> - для работы с почтой. Автоматически запустится приложение для почты
<a href="tel:+79870010010">8(987)-001-00-10</a> - для работы с телефоном. Код начинается с номера страны

-Якорные ссылки:

<ul>
    <li><a href="#Link1">Link1</a></li>
</ul>

<div id="Link1">
    .............
</div>

.link:visited {} - visited - это посещенная ссылка
Такие префиксы могут не отображаться т.к требуют определенного порядка сначало link, visited, active

display: inline-block; - становится блочным, и занимает ширину контента, а не все доступное пространство 


Работа с изображениями и иконками: 

Форматы изображений: 
    - JPG/JPEG
    - PNG
    - GIF
    - Webp

Перед загрузкой картинки нужно ужимать/оптимизировать
Если картинка слишком большого размера, с помощью фотошопа мы ее уменьшаем и снова ужимаем
Чем меньше весит картинка, тем быстрее загружается сайт

Также по необходимости можно изменять формат картинок с помощью онлайн конвертеров

Тег picture - позволяет по мимо img добавлять source т.е источник
Таким образом мы можем указать несколько ссылок на разные картинки

Это нужно т.к формат webp поддерживается далеко не всеми браузерами
Т.е мы в source говорим о разным форматах картинок

<picture>
    <source type="image/web" srcset="img/css.webp">
</picture>

type="image/web" - формат изображения
srcset="img/css.webp"> - ссылка на изображения

<picture>
    <source media="(max-width: 500px)" srcset="img/css_1.webp">
    <source media="(max-width: 900px)" srcset="img/css_2.webp">
    <img src="/css_3" alt="">
</picture>

media - используется для адаптации изображения под различные устройства
Значит что если ширина экрана меньше 500px значит показывается 1 картинка 
Если от 500px до 900px, то 2 картинка. И 3 картинка по умолчанию если не подходят предыдущие условия

Margin и padding можно задать только для блочного элемента
> - значек вложенности в css

С помощью иконочных шрифтов можно добавлять различные изображения всесто картинок
Например меню гамбургер, колокольчик уведомления
И можем стилизовать картинку как текст. Т.к это шрифт

Менять размер, цвет, расположение и т.д


Псевдоклассы и псевдоэлементы: 
    - 

a:visited:hover{} - комбинация псевдоклассов

a:not(.bing) {} - свойство применяется для всех ссылок кроме ссылки с классом .bing


Позиционирование и выпадающее меню: 

Свойство position - указывает как элемент позиционируется в документе top, left, right, bottom и определяет конечное 
    местоположение позиционированных элементов 

position: static; - стоит по умолчанию, даже если мы не задаем данное свойство

Поток - это порядок элементов на странице. По умолчанию все элементы распологаются снизу вверх и слева направо в зависимости от их 
    отображения. Если в html-коде один элемент (тег) следует за другим, то точно также они будут отображены на странице 

position: relative; - относительное позиционирование сдвигает элемент относительно его обычного положения
Чтобы применить позиционирование необходимо указать элементу css-свойство position: relative; и координаты left/right/top/bottom

position: relative;
top: 10px;

Не будут работать одновременно указанные top и bottom, left и right. Нужно использовать только одну границу из каждой пары

position: absolute; - абсолютное позиционирование. Убирает элемент из потока
    1. Координаты left/right/top/bottom для нового местоположения отсчитываются от ближайшего спозиционированного родителя, т.е 
        родителя с позиционированием отличным от static. Если такого радителя нет, то относительно документа
Чтобы абсолючно спозиционировать элемент, нужно его родителю задачать position:relative;

Методология БЭМ: 
    
Решает проблемы: 
    - Упрошает код и облегчает рефакторинг
    - Получаем самодокументированный код
    - Позволяет повторно использовать код и избежать взаимного влияния компонентов друг на друга

Блок карточки товара:     

<div class="product">
    <h2 class="product__title"></h2>
    <p class="product__description"></p>
    <a href="" class="button"></a>
</div>

Что нельзя писать в стилях блока: 

.product {
    -Нельзя задавать внешние отступы. Чтобы не поехала верстка куда будет добавлен блок. Используем только padding
    - Не используем свойство position: absolute;
    - Не используем свойство position: relative; в тех случаях когда у нас дополнительно идет сдвиг left/right/top/bottom
    - Не используем float
}

product-item__input - с названием блока из двух слов

Двойная вложенность: 

<div class="search-form">
    <h2 class="search-form__title"></h2>
    <p class="search-form__description"></p>
    <a href="" class="search-form__button"></a>
</div> 

При работе с БЭМ мы не используем в css вложенность например: 
.product .product__title - не используем
.product p - не используем 

Мы работаем исключительно по классам
Элемент используется всегда только внутри блока 

Модификатор - это второй класс у блока который используется для стилизации
search-form search-form__title_center

Используется всегда как второй класс

Чтобы вставить видео нужно добавить в разметку тег iframe. Скопировать из Youtube

Семантические теги(элементы): 
    - семантические теги четко описывают, что они означают, как браузеру так и разработчику     
В качестве примера <div> и <span> не семантичные теги т.к не говорят о характере их контента
Семантические теги: form, table, article. Они четко описывают какой контент в себе содержат 

Тег section - определяет раздел в документе
Раздел - это тиматически сгруппированный контент как правило с заголовком

Тег article - определяет независимый самодостаточный контент
Контент помещенный в этот элемент должен иметь смысл сам по себе, т.е он должен быть понятен в отрыве от остальных частей
    веб-страницы

Тег header - предназначен для определения заголовочного блока или "шапки" документа или раздела
Используется как контейнер для вводной информации, меню, навигации

Тег footer - предназначен для определения подвала документа или раздела
Обычно в footer размещают информацию об авторе документа, ссылки на условия использования текста, 
    информация об авторских правах, контактные данные и т.п

Тег nav - определяет набор ссылок для навигации
Предназначен только для основного блока навигационного меню

Тег aside - определяет некий контент, находящийся в стороне от контента, внутри которого он расположен
    как боковой блог страницы sidebar

Тег main - определяет основной контент документа


Кросбраузерность: 
    
Перед тем как заливать сайт основной домен его нужно валидировать
Т.е проверить соответствует ли сайт современным стандартам кода
Нужно исправить найденные ошибки

Браузеры самостоятельно добавляют какие-то стили и в каждом браузере по разному 
Нам нужно сделать этот момент более управляемым можно использовать несколько подходов: 
    - сбрасывание стилей например библиотека normalize.css

Также есть такие штуки как вендорные префиксы для разных браузеров
Используется для того что некоторые браузеры еще не поддерживают нововведения 

Для того чтобы автоматически использовать вердорные префиксы нужно установить плагин Autoprefixer
И использовать сочетание клавиш: ctl+sht+c, или f1 autoprefixer run
Стоит использовать только после написания всего проекта, т.к автоматически к коду добавяться префиксы

Кроссбраузерность можно проверить с помощю различных сервисов, платных или бесплатных


Трансформации в CSS: 
    - 


Работа с адаптивом: 
    - 
Чтобы адаптиция работала нужно использовать meta-тег viewport

Адаптивный или отзывчивый?

Адаптив: Когда мы работаем с адаптивом у нас есть какие-то опорные точки на сайте и при изменении размера браузера
    сайт подстраивается под конкретный размер breakpoint(опорных точек)

Отзывчивый: Более гибкий. При изменении содержания плавно меняется все содержимое
    - Можно использовать проценты, математические вычисления,flexbox, grid

Чтобы в браузере посмотреть как сайт будет отображаться на разных устройствах нужно нажать Toggle device toolbar

Адаптив пишется от меньшего разрешения к большему - когда у нас Mobile First
Адаптив пишется от большего разрешения к меньшему - когда у нас Desktop First

 Чтобы адаптивные файлы не мешали css их объединяют в отдельные файлы и подключают в head
 Подключают через ссылку после основных стилей. И когда размер экрана подходит включается файл

Также адаптив пишется диапазонами от 100px до 200px пример. 
@media (min-width: 576px) and (max-width: 976px) {
    h1 {
        color: $colorHeader
    }
}
В таком случае мы можем не переживать за определенную последовательность адаптивных @media свойств

Наследование в scss @extend наследование классов
Наследовать куда либо заготовку %flex-center можно с помощью знака процентов
Также эту конструкцию можно заменить с помощью @mixins для вставки блока кода в scss

Через ключевое слово @include мы подключаем миксин

Пример: 
    
@mixin title($_size, $_weight, mb: 1rem, mt: 1rem) {
    font-size: $_size
    font-weight: $_weight
    font-family: Arial, sans-serif
    margin-bottom: $_mb
    color: #fff
    margin-top: $_mt
}

h1 {
    @include title(1rem, 700, 1.5rem)

    @inclute respondTo(567px, 786px) {
        fonst-size: 3rem
    }

    @inclute respondTo(1567px, 1786px) {
        fonst-size: 3.5rem
    }
}
h2 {
    @include title($_size: 1.5rem, $_weight: 400, mt: 1rem)
}

С помощю переменных мы передаем разные динамические параметры. Параметров может быть любое колличество
Параметры которые указаны не через переменную подставляются везде где вставлен @include

Также если значения не были переданны как параметры можно сделать значение по умолчанию mb: 1rem
В случае если мы не хотим передавать какие-то параметры мы можем напрямую определить какое значение 
    к какой переменной относится

Как правило в проектах файлы с mixins выносятся в отдельные файлы и потом импортируются
@import './_mixins.scss

По такому-же принципц импортируются и переменныые: _variables, и сброс стилей браузеров: _normalize.scss
_normalize.scss - в данной ситуации уже подготовлен, очищен от свойств которые не будут использоваться

Адаптивный миксин: 

@mixins respondTo ($_minWidth, $_maxWidth) {
    @media (min-width: $_minWidth) and (max-width: $_maxWidth) {
        @content
    }
}
















































































































































































































*/