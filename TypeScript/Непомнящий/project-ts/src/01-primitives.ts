/*
TypeScript:
	unknown - мы не знаем о чем идет речь, мы не знаем какое именно значение будет храниться.
		Но мы предпологаем что значение этой переменной мы узнаем позднее

		Ключевое отличие от any в том что мы не сможем испольлзовать методы, т.к не известно
			к какому типу данных пренадлежит данная переменная

		Для unknow в последствии потребуется уточнить какого типа являеться данная переменная

Типизация функций:
	
	У ошибки thow new Error должен быть тип never
		Потому что void сообщает что функция завершиться, да она ничего не вернет, но она завершиться
		В случае с never функция никогда не доведет свою работу до конца и никакой return выполнен не будет

		Также типы возвращаемых значений часто комбинируються между собой 

	Опциональность параметров через ? знак
		В данном случае мы получаем сразу либо number либо undefined
		userId: numberr | undefined

	[key: string]: number - запись внутри interface ознчает что все ключи должны быть только string,
		а все значения должны быть только number

		Если в качестве value будет напимер unknown, то мы в дальнейшем можем в наш interface добавить путем
			переопределения значения нужный тип данных

	По style guide что если у нас есть опциональные или динамические свойства, то их рекомендуют для отличия
		указывать в нотации в квадратных скобках

		car2.go = true
		car2['go'] = true

	Чтобы доказать что-то typescript нужно использовать if else
	if (typeof num === number) {} - пример

*/

const num = (a: number, b: number): number => {
	return a + b
}

function crash(userId?: number): never {
	throw new Error('new arrow')
}

type TypeUser = {
	name: 'Max'
	age: 25

	[key: string]: string | number
}

