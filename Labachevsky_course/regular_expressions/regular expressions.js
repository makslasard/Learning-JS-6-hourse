// Регулярное выражение - мощное средство поиска и замены в строке

// 1. Объявление 
// Есть 2 популярных способа создания. 1. Через RegExp (конструктор) и 2. Через слеши //

// const regExp1 = /love/gmi
// const regExp2 = new RegExp(`${love}`, 'gmi')

// Отличие 
// Первый способ он полностью статический. Мы не можем добавить какую-либо динамику
// В втором способе мы можем добавить динамику c помощью обратных ковычек. Дает возможность более гибкой работы 

// function checkSubstr(str, subStr) {
//     const regExp2 = new RegExp(subStr)
//     return regExp2.test(str)
// }
// console.log(checkSubstr('I love you', 'love'))


// 2.Флаги
// i - флаг i говорит о том что поисковое значение не чувствительно к регистру
// console.log(/love/i.test('I love you'))

// g - флаг g озночает глобальный поиск. Чтобы найти все вхождения /love/
// console.log('I love love you'.match(/love/g))

// m - мультистрочный поиск
// const str =`1 котенок
// 2 котенок
// 3 котенок`

// console.log(str.match(/^\d/gm))


// 3. Методы

// str.match(regexp) - метод строки который позволяет использовать регулярные выражения
// при нахождении совпадения метод match() возвращает массив с информацией об использованном шаблоне, позиции в строке, на которой было найдено совпадение, проверяемом тексте и наборах

// console.log('I love love you'.match(/love/)) - возвращает массив с информацией
// Если мы ищем то, чего в строке нет, то получим null

// replace(regexp, '') - метод строки по поиску и замене
// console.log('I love love you'.replace(/love/, 'like')) - выдает измененную строку

// regexp.test(str) - ищет совпадения с regexp в строке str.
// console.log(/love/.test('I love love you')) - выдает true или false

// Буквенные классы
// \d - любая цифра
// \w - латинская буква, цифра, _
// \s - пробел
// \D - любой символ кроме цифры (\d)
// \W - любой символ кроме латинская буква, цифра, _ (\w)
// \S - любой символ кроме пробел (\s)
// . - абсолютно любой символ кроме \n

// console.log(/\d\d/.test('22 January'))
// console.log(/\w/.test('22 January'))
// console.log(/\s/.test('22 January'))
// console.log(/\d\d\s\w/.test('22 January'))


// Якоря
// ^ - начало строки 
// $ - конец строки
// \b - граница слова. До любого символа который означает конец слова. !, пробел, точка и т.д
// console.log(/^\d\d/.test('22 January'))
// console.log(/\d\d$/.test('January 22')) - проверяется либо начало, либо конец


// Пропуск специальных сиволов
// [ \ ^ $ ( ) . | ? * + /
// Чтобы нам это использовать нужен обратный слеш \
// Нужно использовать перед символом - используется только в статике
// Чтобы использовать с динамикой нужно использовать 2 обратных слеша
// const myreg = new RegExp('\\^\\$\\.', 'i')
// console.log(myreg.test('^$.'))


// Наборы и диапазоны

// [sdr] - любой символ из скобок. Нужно совпадение любого символа
// console.log(/[sdr]/.test('s'))

//  [0-9] - любая цифра от 0 до 9
// [A-Z] - любая большая буква
// [a-z] - любая маленькая буква
// [0-9A-Za-z] - диапазон
// [а-яё] - кирилические буквы. ё - не входит в этот диапазн, поэтому пишем ее рядом
// [^a-z] \D - если добавить галочку в начале, то это будет означать. Любой символ кроме диапазона a-z
// console.log(/[sdr]/.test('s'))

// Мы можем без экранирования писать следующие символы: точка, +, ()
// 2. - минус не экранируется в начале []
// 3. ^ - галочка должна экранироваться только если она вначале. В остальных можно не экранировать
// 4. ] - закрывающая скобка должна экранироваться
// 5. () - не обязательный парметр

// Экранируется в скобочках только то, что имеет какое-то значение  для скобочек


// Квантификаторы
// {n} - обозначается точное количество
// {n1, n2} - обозначается количесвто от n1 до n2
// {n, } - больше или равно n
// [a-z]{3}
// console.log(/\d{3, 5}/.test('123')) - обязывает что должно быть 3 цифры, иначе false

// Сокращение квантификаторов
// + {1, } - от 1 до бесконечности
// ? {0, 1} - от 0 до 1. Напрмер существует буква или нет
// * {0, } - от 0 и выше

// /\d+/.test('12313') - чифр должно быть от 1 и больше


// Жадность и лень! Жадные и ленивые алгоритмы

// console.log(
//     'I "love" or "like" you'.match(/".+"/g) - жадная регулярка. Взяла и все проверила
// )

// console.log(
//     'I "love" or "like" you'.match(/".+?"/g) - 
// )


// Группы захвата
// Можем более интересно манипулировать выражением


// console.log(
//     'I love you'.match(/(lo)(ve)/)
// )
// Произойдет 3 фхождения. love, lo, ve. Если поставить флаг g нечего не произойдет

// console.log(
//     'Elena Litvinova'.replace(/(?:\w+) (\w+)/, '$2 $1')
// )
// ?: - такие символы не дают захватить группу


// Оператор ИЛИ (OR)
// console.log(
//     /html|css|javascript/.test('I love html')
// )


// Практика: 

// const input = '  f  ';
// console.log(
//     /\S/.test(input)
// )

// const input = '  I love you!  '; - некоторые выражения можно заменить на методы. Например trim()
// console.log(
//     input.replace(/^\s+|\s+$/g, '')
// )

// const input = 'I   love    you!';
// console.log(
//     input.replace(/\s+/g, ' ')
// )