/*
localStorage (Локальное хранилище)
    - это объект который встроен в браузер и он может хранить различные данные (Свойство global window)

    ВАЖНО!!! Значение в localStorage будут оставаться даже при перезагрузке страницы

    Данный объект уникален для каждого домена (сайт).
    Это сделано из позиции безопасности т.к JS не может выходить за пределы вкладки, работать 
        с другими вкладками или даже файлами на ПК

    Application => LocalStorage => https.... 
    Данные храняться в формате ключ значение 

    В данный объект помещаеться около 5MB информации

    Методы localStorage
        - setItem: записывает данные 
        - getItme: получает данные
        - removeItem: удаляет данные
        - clear: полностью очищает локальное хранилище

    Чтобы хранить в localStorage объекты и массивы их сначало нужно перевести в формат JSON

*/
const person = {
    id: 1,
    name: 'Alex',
    age: 30
}

const converterPerson = JSON.stringify(person)
localStorage.setItem('User', converterPerson)

/*
Геттеры и Сеттеры

    Объекты сосотят из свойств и методов:
        - Свойство это то что описывает наш объект (какие-то хар-ки, данные)
        
            - Свойства данные (просто описывали наш объект)
            - Свойтства акцессоры (позволяет как присваиавть так и получать значения)
                - Getters (Позволяют получать какое-то значение свойства)
                    - Повзоляет работать с методом как с обычным свойством (При вызовые не ставить круглые скобки)
                        Поэтому это называеться свойтсво акцессор
                - Setters (Позволяют устанавливать какое-то значение свойства)

        - Методы это то что умеет делать наш объект

    При одинаковом именновании get и set ошибки не будет т.к это будет восприниматься как пара свойтств
    Если например удалить либо getter либо setter, то будет ошибка т.к у объекта должны быть и get и set

*/
const user = {
    id: 1,
    name: 'Alex',
    age: 25,

    get userAge() {
        return this.age
    },

    set userAge(num) { // Должен что-то принимать
        this.age = num
    }
}

console.log(user.userAge) // Получение возраста
console.log(user.userAge = 30) // Перезапись значения. Установление нового значения

/*
Инкапсуляция
    - отделение и сокрытие от внешнего мира внутренности программы (Переменный, функий и т.д)

    Объект хранит свое состояние в приватном порядке и только методы объекта
        имеют доступ для его изменения

        - Защита от вмешательства пользователем. (Он не сможет залезть внутрь и что-то поменять)
        - Мы сможем всегда без последвий улучшать нашу программу
        - Удобство использования (Внутренности программы скрыты, а мы используем только ее результат)

        Преимущество инкапсуляции что мы не можем переопределять свойства и методы объект из вне
            т.к нет доступа к локальному this. Чтобы можно было работать с такими свойствами нужно
            использовать getters и setters

        _название свойства - свойство которое нам нужно скрыть от внешних факторов
        this._power = power

        #название свойства - приватное свойство. Нельзя получить из вне
*/
class User {
    constructor(name, age) {
        this.name = name
        this.age = age
    }

    set User(name) {
        console.log(`${name}, название!`)
    }

    get User() {
        console.log('Получить значение')
    }
}

const createUser = new User('Alex', 25)
console.log(createUser)