/*
Теория тестирования: 
    - это код который проверяет работает ли код написанного приложения правильно. Отвечает ли он бизнес ожиданиям

Если вы сделали фичу которая копирует какие-то данные, то она реально должна их копировать, а не удалять например
Когда мы говорим о соответсвии кода каким-то бизнес ожиданиям необходимо ввести 2 важных понятия:

    - TDD (Test Driven Development) - это написание тестов, а потом на основании написанных тестов задание логики

    - BDD (Behaviour Driven Developmen) - это написание тестов, предпологается описание тестировщика или бизнес аналитиком пользовательских сценариев. Т.е описание поведения 

Типы тестирования: Пирамида тестирования

1. Unit Testing
    - Самый простой вариант тестирования. Когда по сути происходит проверка логики инкапсулированного модуля или юнита
В нашем случае, это полное тестирование логики инкапсулированного компонента. Данный вариант тестирования самый быстрый и самый простой
И не требует разворачивания каких-то дополнительных окружений 

2. Integration Testing
    - Проверяется взаимодействие созданного модуля с другими. Т.е не сломалась ли новая логика или что-то за ее пределами
Этот вариант сложнее и требует больше знаний в области тестирования. Плюс установки и настройки среды тестирования

3. End-to-end (E2E)
    - Самый сложный и самый надежный. Но в тоже время самый объемный и требующий большого кол-ва времени
Проверяется работа всего приложения и фактически описанные ранее бизнес кейсы


Когда мы начинаем работать с Unit - тестированием или как его еще называют модульным тестированием первое понятие с которым
мы столкнемся это STUB & MOCK. Оба определения связаны с подменой данных 

- STUB & MOCK - это объекты которые создаются и используются в замен реальных объектов с которыми взаимодейтвует модуль в процессе своей работы

Stub - это статичный объект который имеет структуру валидного ответа. Не имеет значения какие вводные данные мы даем ответ всегда будет один и тот же

initialize => exercise => verify
    
Mock - это настраиваемые объекты которые позволяют задать ожидание в виде своего рода спецификации вызовов которые мы планируем получить

initialize => set expectations =>exercise => verify

Валидный тест - это один тест одна проверка

Unit тестирование предпологает инкапсуляцию модуля и проверку его внутренней логики 
Даже у компонента есть свои свойства и методы которые он принимает с наружи ввиде props
Какие-то внешние утилиты, пакеты и тд. Именно эти данные будут подменяться

Требование к тестированию:
    - Правило 1: 1 тест , 1 проверка

Не нужно делать 1 общий тест и проганять 100500 разных случаев
Для каждого действия должен быть свой индивидуальный тестировочный кейс

Ключевые слова: describe, it 
    Это посути обертки внутри которых мы описываем ожидание. После чего создаем тест
    Тест должен быть локаничным максимально простым в понимании и чтении

Понятие coverage - покрытие кода тестами. В реальных проектах цифра должна быть не ниже ~90%
100% - это не достижимое число. В идеале нужно 90% и выше

Все файлы в которых содержаться тесты будут заканчиваться на .spec.js - это обязательное условие






















*/